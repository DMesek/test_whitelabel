definitions:     
  env_vars: &env_vars
    S3_BUCKET_NAME: demo-app-clients22 # The name of your S3 bucket that have all of your clients assets.
    ANDROID_ASSETS_FOLDER: android_icons # The name of your folder in S3 bucket that have the client's Android assets from (/android/app/src/main/res/).
    IOS_ASSETS_FOLDER: ios_icons # The name of your folder in S3 bucket that have the client's iOS assets from (/ios/Runner/Assets.xcassets/).
    FIREBASE_OPTIONS_FOLDER: lib #change this later
  scripts:
    - &build_apk
        name: Build Android APK
        script: |
          BUILD_NUMBER=3
          flutter build apk --release --build-number=$BUILD_NUMBER
    - &set_up_local_properties
        name: Set up Android local properties
        script: echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/apps/main_app/android/local.properties"  
    - &set_up_key_properties
        name: Set up Android key.properties
        script: |
          cat >> "$CM_BUILD_DIR/apps/main_app/android/key.properties" <<EOF
          storePassword=$CM_KEYSTORE_PASSWORD
          keyPassword=$CM_KEY_PASSWORD
          keyAlias=$CM_KEY_ALIAS
          storeFile=$CM_KEYSTORE_PATH
          EOF  
    - &get_assets
      name: Get assets from AWS S3 bucket
      script: |
        ASSETS_FOLDER=${CLIENT_ID}_assets
        echo "ASSETS_FOLDER=${ASSETS_FOLDER}" >> $CM_ENV
        
        aws s3 cp s3://$S3_BUCKET_NAME/$CLIENT_ID/assets.zip $ASSETS_FOLDER.zip
        echo "Unzipping assets"
        unzip $ASSETS_FOLDER.zip -d $ASSETS_FOLDER

    - &get_firebase_config
      name: Get Firebase config from AWS S3 bucket
      script: |
        FIREBASE_CONFIG_FOLDER=${CLIENT_ID}_firebase
        echo "FIREBASE_CONFIG_FOLDER=${FIREBASE_CONFIG_FOLDER}" >> $CM_ENV
        
        aws s3 cp s3://$S3_BUCKET_NAME/$CLIENT_ID/firebase_config.zip $FIREBASE_CONFIG_FOLDER.zip
        echo "Unzipping firebase config"
        unzip $FIREBASE_CONFIG_FOLDER.zip -d $FIREBASE_CONFIG_FOLDER

    - &setup_firebase_config
      name: Setup firebase configuration
      script: |
        if [ -z "$ENVIRONMENT" ]; then
          ENVIRONMENT="production"
        fi
        echo "Using environment: $ENVIRONMENT"

        mv -f ./$FIREBASE_CONFIG_FOLDER/google-services.json android/app/$ENVIRONMENT
        mv -f ./$FIREBASE_CONFIG_FOLDER/firebase_options_prod.dart $FIREBASE_OPTIONS_FOLDER
        mv -f ./$FIREBASE_CONFIG_FOLDER/GoogleService-Info.plist ios/Runner/$ENVIRONMENT


# Builds will be triggered via Codemagic's REST API with the $CLIENT_ID variable and the WL_CLIENT_ID environment group in the payload
workflows:
  ios-client-release:
    name: iOS client release
    instance_type: mac_mini_m1 # Helpful when you open your Codemagic's builds page  
    environment:
      groups:
        - aws_credentials # Includes (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_DEFAULT_REGION)
      vars:
        <<: *env_vars
        XCODE_SCHEME: "Runner"
    scripts:
      - *get_assets #Getting client assets from S3 bucket
      - *get_firebase_config #Getting client Firebase config from S3 bucket

      - name: Change iOS app name
        script: /usr/libexec/PlistBuddy -c "Set :CFBundleName $APP_NAME" -c "Set :CFBundleDisplayName $APP_NAME" ios/${XCODE_SCHEME}/Info.plist

      - name: Set bundle id
        script: sed -i '' -e 's/PRODUCT_BUNDLE_IDENTIFIER \= [^\;]*\;/PRODUCT_BUNDLE_IDENTIFIER = '${BUNDLE_ID}';/' ios/${XCODE_SCHEME}.xcodeproj/project.pbxproj

      - name: Change iOS icons
        script: cp -r ./$ASSETS_FOLDER/$IOS_ASSETS_FOLDER ios/${XCODE_SCHEME}/Assets.xcassets/
      
      - name: Set client .env file
        script: echo $DOTENV | base64 --decode > assets/client.env
      
      - name: Set main image # An image that being used in this sample project
        script: cp -r ./$ASSETS_FOLDER/hero.png assets/hero.png
      
      - name: Install pods
        script: find . -name "Podfile" -execdir pod install \;      
      
      - name: iOS code signing
        script: |
          keychain initialize
          app-store-connect fetch-signing-files "$BUNDLE_ID" --type IOS_APP_STORE --create
          keychain add-certificates
          xcode-project use-profiles
      
      - name: Install dependencies
        script: flutter packages pub get      
      
      - name: Flutter build ipa and automatic versioning
        script: |
          BUILD_NUMBER=$(($(app-store-connect get-latest-testflight-build-number "$APP_STORE_ID") + 1))
          flutter build ipa --release \
          --build-name=1.0.$BUILD_NUMBER \
          --build-number=$BUILD_NUMBER\
          --export-options-plist=/Users/builder/export_options.plist
    artifacts: 
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log    
      - test-results/flutter.json
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    publishing:      
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
      email: 
        recipients:
          - name@mail.com
  
  android-client-release:
    name: Android client release
    instance_type: mac_mini_m1
    environment:
      groups:
        - aws_credentials # Includes (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_DEFAULT_REGION)
        - keystore
      vars:
        <<: *env_vars
    scripts:
      - *get_assets #Getting client assets from S3 bucket
      - *get_firebase_config #Getting client Firebase config from S3 bucket
      - *setup_firebase_config #Setting up firebase configuration

      - name: Change Android app name
        script: sed -i.bak "s/android:label=.*/android:label=\"$APP_NAME\"/g" android/app/src/main/AndroidManifest.xml
     
      - name: Change Android package name
        script: |
          echo "android {  defaultConfig { applicationId '${ANDROID_APP_ID}' }  }" > android/changePackage.gradle
          echo "apply from: rootProject.file('changePackage.gradle')" >> android/app/build.gradle

      - name: Change Android icons
        script: cp -r ./$ASSETS_FOLDER/$ANDROID_ASSETS_FOLDER/* ./android/app/src/main/res
          
      - name: Set client .env file
        script: echo $ENV | base64 --decode > ./.env

      - name: View GIT
        script: |
          echo "********* GIT STATUS:"
          ls ~/.ssh
          git remote -v


      
      # - name: Check files
      #   script: |
      #     echo "***CONTENT OF THE BUILD DIR***"
      #     ls -l $FIREBASE_CONFIG_FOLDER
      #     ls -l android/app

      #     echo "********* GIT STATUS:"
      #     git status

      #     echo "********** android/app/build.gradle"
      #     cat android/app/build.gradle

      #     echo "********** android/app/src/main/AndroidManifest.xml"
      #     cat android/app/src/main/AndroidManifest.xml

      #     echo "********** .env"
      #     cat .env
    artifacts: 
      - build/app/outputs/flutter-apk/*.apk